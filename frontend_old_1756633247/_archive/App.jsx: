// src/App.jsx
import "./styles/forms.css";
import React, { useContext, useEffect } from "react";
import { Routes, Route, Navigate, useNavigate, Link } from "react-router-dom";

import { AuthProvider, AuthContext } from "./context/AuthContext";
import { registerUnauthorizedHandler, setAuthToken } from "./services/api";

// Layout
import Header from "./components/Header";
import Footer from "./components/Footer";

// Seiten
import Home from "./pages/Home";
import Login from "./pages/Login";
import Register from "./pages/Register";
import ResetPassword from "./pages/ResetPassword";
import ConfirmReset from "./pages/ConfirmReset";
import Dashboard from "./pages/Dashboard";
import HelpPage from "./pages/HelpPage";

/** Einfache Platzhalter-Seite für Links, die wir noch nicht gebaut haben */
function SimplePage({ title, children }) {
  return (
    <div style={{ maxWidth: 960, margin: "0 auto", padding: "24px 16px" }}>
      <h1 style={{ margin: "8px 0 14px" }}>{title}</h1>
      <p style={{ color: "#546e7a" }}>
        Diese Seite ist ein Platzhalter für die Demo. Inhalte folgen.
      </p>
      {children}
    </div>
  );
}

/** Geschützte Route (nur mit Login) */
function ProtectedRoute({ children }) {
  const { isAuthed } = useContext(AuthContext);
  if (!isAuthed) return <Navigate to="/login" replace />;
  return children;
}

/** Layout mit Header / Main / Footer */
function AppLayout({ children }) {
  return (
    <div
      style={{
        minHeight: "100vh",
        display: "flex",
        flexDirection: "column",
        background: "#f5f5f5",
      }}
    >
      <Header />
      <main
        style={{
          flex: 1,
          maxWidth: 1200,
          margin: "20px auto",
          padding: "0 16px",
          width: "100%",
        }}
      >
        {children}
      </main>
      <Footer />
    </div>
  );
}

/** Router + globales Unauthorized-Handling */
function AppRouter() {
  const navigate = useNavigate();
  const { token } = useContext(AuthContext);

  // Authorization-Header setzen, wenn sich das Token ändert
  useEffect(() => {
    setAuthToken(token || null);
  }, [token]);

  // 401 global abfangen -> Login
  useEffect(() => {
    const unsubscribe = registerUnauthorizedHandler(() => {
      navigate("/login", { replace: true });
    });
    return typeof unsubscribe === "function" ? unsubscribe : undefined;
  }, [navigate]);

  return (
    <AppLayout>
      <Routes>
        {/* Hauptseiten */}
        <Route path="/" element={<Home />} />
        <Route path="/help" element={<HelpPage />} />

        {/* Auth */}
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route path="/reset" element={<ResetPassword />} />
        <Route path="/reset/confirm" element={<ConfirmReset />} />

        {/* Geschützt */}
        <Route
          path="/dashboard"
          element={
            <ProtectedRoute>
              <Dashboard />
            </ProtectedRoute>
          }
        />

        {/* Fallback 404 */}
        <Route
          path="*"
          element={
            <SimplePage title="Seite nicht gefunden">
              <p style={{ marginTop: 12 }}>
                <Link to="/" className="btn" style={{ textDecoration: "none" }}>
                  Zur Startseite
                </Link>
              </p>
            </SimplePage>
          }
        />
      </Routes>
    </AppLayout>
  );
}

export default function App() {
  return (
    <AuthProvider>
      <AppRouter />
    </AuthProvider>
  );
}
