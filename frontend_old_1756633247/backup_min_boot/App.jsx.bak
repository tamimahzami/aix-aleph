// src/App.jsx
import React, { Suspense, lazy, useContext, useEffect } from "react";
import { Routes, Route, Navigate, useNavigate, Link } from "react-router-dom";

import { AuthProvider, AuthContext } from "./context/AuthContext";
import { registerUnauthorizedHandler, setAuthToken } from "./services/api";

import Header from "./components/Header";
import Footer from "./components/Footer";
import styles from "./styles/AppLayout.module.css";
import "./styles/forms.css";

// ---------- Lazy/Eager helper (Lazy in Prod/Dev, Eager in Test) ----------
const isTest = process.env.NODE_ENV === "test";
/* eslint-disable global-require, import/no-dynamic-require */
const lazyOrEager = (path) =>
  isTest ? { Component: require(`${path}`).default } : { Lazy: lazy(() => import(`${path}`)) };
/* eslint-enable global-require, import/no-dynamic-require */

// Pages
const HomeMod                = lazyOrEager("./pages/Home");
const AboutPageMod           = lazyOrEager("./pages/AboutPage");
const ContactPageMod         = lazyOrEager("./pages/ContactPage");
const BlogPageMod            = lazyOrEager("./pages/BlogPage");
const SolutionsCitiesMod     = lazyOrEager("./pages/SolutionsCitiesPage");
const VehiclesBusMod         = lazyOrEager("./pages/VehiclesBusPage");
const APIDocsMod             = lazyOrEager("./pages/APIDocsPage");
const ImprintPageMod         = lazyOrEager("./pages/ImprintPage");
const PrivacyPageMod         = lazyOrEager("./pages/PrivacyPage");       // ← Dateiname anpassen, falls bei dir anders
const AccessibilityPageMod   = lazyOrEager("./pages/AccessibilityPage");
const HelpPageMod            = lazyOrEager("./pages/HelpPage");
const LoginMod               = lazyOrEager("./pages/Login");
const RegisterMod            = lazyOrEager("./pages/Register");
const ResetPasswordMod       = lazyOrEager("./pages/ResetPassword");
const ConfirmResetMod        = lazyOrEager("./pages/ConfirmReset");
const DashboardMod           = lazyOrEager("./pages/Dashboard");

// Mini-Loader für Suspense (nur außerhalb von Tests genutzt)
function Loader() {
  return (
    <div style={{ padding: "32px 16px", textAlign: "center" }}>
      <span aria-busy="true" aria-live="polite">Lade…</span>
    </div>
  );
}

// App-Layout
function AppLayout({ children }) {
  return (
    <div className={styles.appContainer}>
      <a
        href="#main-content"
        style={{ position: "absolute", left: -9999, top: "auto" }}
        onFocus={(e) => {
          e.currentTarget.style.left = "8px";
          e.currentTarget.style.top = "8px";
        }}
      >
        Direkt zum Inhalt
      </a>
      <Header />
      <main className={styles.mainContent} id="main-content">
        {children}
      </main>
      <Footer />
    </div>
  );
}

// Geschützte Route
function ProtectedRoute({ children }) {
  const { isAuthed } = useContext(AuthContext) || { isAuthed: false };
  return isAuthed ? children : <Navigate to="/login" replace />;
}

// Router mit Auth-Handling
function AppRouter() {
  const navigate = useNavigate();                // ✅ war vorher gefehlt
  const { token } = useContext(AuthContext) || {};

  useEffect(() => {
    setAuthToken(token || null);
  }, [token]);

  useEffect(() => {
    const unsubscribe = registerUnauthorizedHandler(() => {
      navigate("/login", { replace: true });
    });
    return typeof unsubscribe === "function" ? unsubscribe : undefined;
  }, [navigate]);

  // In Tests: keine Suspense-Hülle & sofort geladene Komponenten
  if (isTest) {
    return (
      <AppLayout>
        <Routes>
          <Route path="/" element={<HomeMod.Component />} />

          <Route path="/about" element={<AboutPageMod.Component />} />
          <Route path="/contact" element={<ContactPageMod.Component />} />
          <Route path="/blog" element={<BlogPageMod.Component />} />
          <Route path="/help" element={<HelpPageMod.Component />} />

          <Route path="/solutions" element={<Navigate to="/solutions/cities" replace />} />
          <Route path="/solutions/cities" element={<SolutionsCitiesMod.Component />} />

          <Route path="/vehicles" element={<Navigate to="/vehicles/bus" replace />} />
          <Route path="/vehicles/bus" element={<VehiclesBusMod.Component />} />

          <Route path="/api-docs" element={<APIDocsMod.Component />} />

          <Route path="/login" element={<LoginMod.Component />} />
          <Route path="/register" element={<RegisterMod.Component />} />
          <Route path="/reset" element={<ResetPasswordMod.Component />} />
          <Route path="/confirm-reset" element={<ConfirmResetMod.Component />} />

          <Route
            path="/dashboard"
            element={
              <ProtectedRoute>
                <DashboardMod.Component />
              </ProtectedRoute>
            }
          />

          <Route path="/imprint" element={<ImprintPageMod.Component />} />
          <Route path="/privacy" element={<PrivacyPageMod.Component />} />
          <Route path="/accessibility" element={<AccessibilityPageMod.Component />} />

          <Route path="*" element={<NotFound />} />
        </Routes>
      </AppLayout>
    );
  }

  // Normalbetrieb: mit Suspense/Lazy
  return (
    <AppLayout>
      <Suspense fallback={<Loader />}>
        <Routes>
          <Route path="/" element={<HomeMod.Lazy />} />

          <Route path="/about" element={<AboutPageMod.Lazy />} />
          <Route path="/contact" element={<ContactPageMod.Lazy />} />
          <Route path="/blog" element={<BlogPageMod.Lazy />} />
          <Route path="/help" element={<HelpPageMod.Lazy />} />

          <Route path="/solutions" element={<Navigate to="/solutions/cities" replace />} />
          <Route path="/solutions/cities" element={<SolutionsCitiesMod.Lazy />} />

          <Route path="/vehicles" element={<Navigate to="/vehicles/bus" replace />} />
          <Route path="/vehicles/bus" element={<VehiclesBusMod.Lazy />} />

          <Route path="/api-docs" element={<APIDocsMod.Lazy />} />

          <Route path="/login" element={<LoginMod.Lazy />} />
          <Route path="/register" element={<RegisterMod.Lazy />} />
          <Route path="/reset" element={<ResetPasswordMod.Lazy />} />
          <Route path="/confirm-reset" element={<ConfirmResetMod.Lazy />} />

          <Route
            path="/dashboard"
            element={
              <ProtectedRoute>
                <DashboardMod.Lazy />
              </ProtectedRoute>
            }
          />

          <Route path="/imprint" element={<ImprintPageMod.Lazy />} />
          <Route path="/privacy" element={<PrivacyPageMod.Lazy />} />
          <Route path="/accessibility" element={<AccessibilityPageMod.Lazy />} />

          <Route path="*" element={<NotFound />} />
        </Routes>
      </Suspense>
    </AppLayout>
  );
}

// 404
function NotFound() {
  return (
    <div style={{ padding: "24px 0", textAlign: "center" }}>
      <h1 style={{ margin: 0 }}>404</h1>
      <p style={{ color: "var(--muted)" }}>Seite nicht gefunden.</p>
      <Link to="/" style={{ color: "var(--brand)" }}>Zur Startseite</Link>
    </div>
  );
}

export default function App() {
  return (
    <AuthProvider>
      <AppRouter />
    </AuthProvider>
  );
}
