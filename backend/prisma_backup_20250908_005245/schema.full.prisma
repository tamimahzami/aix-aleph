// ======================================
// AIX Aleph — Prisma Schema (final clean)
// ======================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Dev: SQLite. Für Postgres später nur provider + URL tauschen.
  provider = "sqlite"
  url      = env("DATABASE_URL") // z.B. file:./prisma/dev.db
}

// =========================
// Benutzer & Auth
// =========================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Gegenfelder
  fleetId      String?
  fleet        Fleet?   @relation(fields: [fleetId], references: [id])
  employees    Employee[]        // <— Gegenfeld zu Employee.user
  agents       Agent[]           // <— Gegenfeld zu Agent.user
  experiments  Experiment[]      // <— Gegenfeld zu Experiment.createdBy

  apiKeys   ApiKey[]

  @@map("users")
}

enum UserRole {
  USER
  FLEET_MANAGER
  DISPATCHER
  ADMIN
  SUPER_ADMIN
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime?

  @@map("api_keys")
}

// =========================
// Mandant / Flotte
// =========================

model Fleet {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationen
  users            User[]
  vehicles         Vehicle[]
  employees        Employee[]
  routes           Route[]
  depots           Depot[]
  chargingStations ChargingStation[]  // <— Gegenfeld zu ChargingStation.fleet
  integrations     Integration[]

  @@map("fleets")
}

model Depot {
  id        String   @id @default(cuid())
  name      String
  location  Json     // Geo-Koordinaten
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fleetId String
  fleet   Fleet @relation(fields: [fleetId], references: [id], onDelete: Cascade)

  chargers ChargingStation[]

  @@map("depots")
}

// =========================
// Fahrzeuge
// =========================

model Vehicle {
  id                  String        @id @default(cuid())
  licensePlate        String        @unique
  vin                 String        @unique
  model               String
  manufacturer        String
  type                VehicleType
  year                Int
  batteryCapacity     Float         // kWh
  currentBatteryLevel Float         // %
  status              VehicleStatus @default(AVAILABLE)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  fleetId String
  fleet   Fleet @relation(fields: [fleetId], references: [id], onDelete: Cascade)

  routes      Route[]
  telemetry   TelemetryData[]
  maintenance MaintenanceRecord[]
  assignments VehicleAssignment[]
  charging    ChargingSession[]
  drivingLogs DrivingLog[]

  @@map("vehicles")
}

enum VehicleType {
  CAR
  VAN
  TRUCK
  MOTORBIKE
  SCOOTER
  BUS
}

enum VehicleStatus {
  AVAILABLE
  IN_USE
  CHARGING
  MAINTENANCE
  OUT_OF_SERVICE
}

// =========================
// Ladeinfrastruktur
// =========================

model ChargingStation {
  id          String   @id @default(cuid())
  name        String
  location    Json     // Geo-Koordinaten
  type        ChargerType
  power       Float    // kW
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  depotId String?
  depot   Depot?  @relation(fields: [depotId], references: [id])

  fleetId String
  fleet   Fleet   @relation(fields: [fleetId], references: [id], onDelete: Cascade)

  sessions ChargingSession[]

  @@map("charging_stations")
}

enum ChargerType {
  AC_STANDARD   // ~22 kW
  DC_FAST       // ~50-150 kW
  SUPERCHARGER  // 150-350 kW
}

model ChargingSession {
  id                String   @id @default(cuid())
  stationId         String
  vehicleId         String
  startTime         DateTime
  endTime           DateTime?
  startBatteryLevel Float
  endBatteryLevel   Float?
  energyDelivered   Float?   // kWh
  cost              Float?
  status            ChargingSessionStatus @default(ACTIVE)
  createdAt         DateTime @default(now())

  station ChargingStation @relation(fields: [stationId], references: [id], onDelete: Cascade)
  vehicle Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("charging_sessions")
}

enum ChargingSessionStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
  ERROR
}

// =========================
// Routen
// =========================

model Route {
  id                String      @id @default(cuid())
  startAddress      String
  endAddress        String
  waypoints         Json?       // Zwischenstopps
  distance          Float       // km
  estimatedDuration Int         // Minuten
  plannedStart      DateTime
  plannedEnd        DateTime?
  actualStart       DateTime?
  actualEnd         DateTime?
  status            RouteStatus @default(PLANNED)
  energyConsumption Float?      // kWh (geschätzt)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  fleetId String
  fleet   Fleet @relation(fields: [fleetId], references: [id], onDelete: Cascade)

  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  driverId String?
  // Benannte Relation für Primärfahrer
  driver   Employee? @relation("PrimaryDriver", fields: [driverId], references: [id])

  assignments RouteAssignment[]

  @@index([driverId])
  @@map("routes")
}

enum RouteStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
}

// =========================
// Telemetrie & Wartung
// =========================

model TelemetryData {
  id           String   @id @default(cuid())
  vehicleId    String
  batteryLevel Float
  range        Float    // km
  location     Json     // Geo
  speed        Float?
  temperature  Float?
  timestamp    DateTime @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId, timestamp])
  @@map("telemetry_data")
}

model MaintenanceRecord {
  id            String           @id @default(cuid())
  vehicleId     String
  type          MaintenanceType
  description   String
  scheduledDate DateTime
  completedDate DateTime?
  cost          Float?
  status        MaintenanceStatus @default(SCHEDULED)
  technician    String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("maintenance_records")
}

enum MaintenanceType {
  ROUTINE_CHECK
  BATTERY_INSPECTION
  TIRE_REPLACEMENT
  BRAKE_SERVICE
  SOFTWARE_UPDATE
  REPAIR
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  DEFERRED
}

// =========================
// Personal / Einsätze
// =========================

model Employee {
  id             String   @id @default(cuid())
  employeeId     String   @unique
  firstName      String
  lastName       String
  email          String   @unique
  phone          String?
  department     String?
  position       String
  employmentType EmploymentType
  hourlyRate     Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])   // Gegenfeld: User.employees

  fleetId String
  fleet   Fleet  @relation(fields: [fleetId], references: [id], onDelete: Cascade)

  assignments        VehicleAssignment[]
  routeAssignments   RouteAssignment[]
  timeRecords        TimeRecord[]
  payrollRecords     PayrollRecord[]
  drivingLogs        DrivingLog[]
  complianceChecks   ComplianceCheck[]        // <— Gegenfeld zu ComplianceCheck.employee

  // Gegenfeld zur benannten Relation "PrimaryDriver"
  primaryDriverRoutes Route[] @relation("PrimaryDriver")

  @@map("employees")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
}

model VehicleAssignment {
  id         String   @id @default(cuid())
  vehicleId  String
  employeeId String
  startDate  DateTime
  endDate    DateTime?
  purpose    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  vehicle  Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("vehicle_assignments")
}

model RouteAssignment {
  id         String   @id @default(cuid())
  routeId    String
  employeeId String
  role       RouteRole @default(DRIVER)
  startTime  DateTime
  endTime    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  route    Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("route_assignments")
}

enum RouteRole {
  DRIVER
  CO_DRIVER
  ASSISTANT
}

// =========================
// Zeiten & Fahrtenbücher
// =========================

model TimeRecord {
  id               String   @id @default(cuid())
  employeeId       String
  date             DateTime
  startTime        DateTime
  endTime          DateTime?
  breakMinutes     Int      @default(0)
  type             TimeRecordType
  projectCode      String?
  notes            String?
  status           TimeRecordStatus @default(DRAFT)
  approvedBy       String?
  approvedAt       DateTime?
  autologgSessionId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, date])
  @@map("time_records")
}

enum TimeRecordType {
  WORK
  DRIVING
  BREAK
  TRAINING
  VACATION
  SICK_LEAVE
}

enum TimeRecordStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model DrivingLog {
  id               String   @id @default(cuid())
  employeeId       String
  vehicleId        String
  startTime        DateTime
  endTime          DateTime?
  startMileage     Float
  endMileage       Float?
  startLocation    Json     // Geo-Koordinaten
  endLocation      Json?
  purpose          String?
  projectCode      String?
  notes            String?
  autologgSessionId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  vehicle  Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([employeeId, startTime])
  @@map("driving_logs")
}

// =========================
// Payroll & Compliance
// =========================

model PayrollRecord {
  id            String   @id @default(cuid())
  employeeId    String
  periodStart   DateTime
  periodEnd     DateTime
  totalHours    Float
  regularHours  Float
  overtimeHours Float
  nightHours    Float
  weekendHours  Float
  holidayHours  Float
  baseSalary    Float
  overtimePay   Float
  bonus         Float
  deductions    Float
  netPay        Float
  status        PayrollStatus @default(DRAFT)
  processedAt   DateTime?
  exportId      String?
  exportedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, periodStart, periodEnd])
  @@map("payroll_records")
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  APPROVED
  PROCESSED
  EXPORTED
}

model ComplianceCheck {
  id          String           @id @default(cuid())
  employeeId  String
  checkDate   DateTime
  type        ComplianceType
  description String
  status      ComplianceStatus
  notes       String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("compliance_checks")
}

enum ComplianceType {
  DRIVING_TIME
  REST_TIME
  WORKING_TIME
  VEHICLE_SAFETY
  DOCUMENTATION
}

enum ComplianceStatus {
  PASSED
  WARNING
  VIOLATION
  RESOLVED
}

// =========================
// KI-Agenten & Experimente
// =========================

model Agent {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        AgentType
  status      AgentStatus @default(INACTIVE)
  version     String
  config      Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Gegenfeld: User.agents

  experiments Experiment[]  // <— Gegenfeld zu Experiment.agent
  metrics     AgentMetric[]

  @@map("agents")
}

enum AgentType {
  ROUTING_OPTIMIZATION
  CHARGING_OPTIMIZATION
  MAINTENANCE_PREDICTION
  DRIVER_BEHAVIOR_ANALYSIS
  ENERGY_MANAGEMENT
  COMPLIANCE_MONITORING
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  TRAINING
  ERROR
}

model AgentMetric {
  id        String   @id @default(cuid())
  agentId   String
  name      String
  value     Float
  timestamp DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, timestamp])
  @@map("agent_metrics")
}

// Experimente – kompatibel mit deinen API-Calls
model Experiment {
  id              String             @id @default(cuid())
  name            String
  description     String?
  type            ExperimentType     @default(AB)
  status          ExperimentStatus   @default(DRAFT)
  strategy        ExperimentStrategy @default(FIXED)
  hypothesis      String?
  startTime       DateTime?
  endTime         DateTime?
  notes           String?
  decision        ExperimentDecision @default(UNDECIDED)
  decisionReason  String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // erstellt von
  createdById String?
  createdBy   User? @relation(fields: [createdById], references: [id])

  // verknüpfter Agent (für Agent.experiments)
  agentId String?
  agent   Agent? @relation(fields: [agentId], references: [id])

  // optionale Domänen-Referenzen (frei für spätere Nutzung)
  aiModelId      String?
  routeId        String?
  pricingModelId String?

  arms    ExperimentArm[]
  metrics ExperimentMetric[]

  @@map("experiments")
}

enum ExperimentType {
  AB
  MULTI_ARM
}

enum ExperimentStatus {
  DRAFT
  RUNNING
  COMPLETED
  FAILED
  PAUSED
}

enum ExperimentStrategy {
  FIXED
  EPS_GREEDY
  UCB1
  THOMPSON
}

enum ExperimentDecision {
  UNDECIDED
  CHAMPION
  CHALLENGER
  MULTI_WINNER
}

model ExperimentArm {
  id           String   @id @default(cuid())
  experimentId String
  name         String
  aiModelId    String?
  initialSplit Int
  minSplit     Int?
  maxSplit     Int?
  isChampion   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  experiment Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId])
  @@map("experiment_arms")
}

model ExperimentMetric {
  id           String   @id @default(cuid())
  experimentId String
  key          String
  value        Float
  createdAt    DateTime @default(now())

  experiment Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId, createdAt])
  @@map("experiment_metrics")
}

// =========================
// Integrationen
// =========================

model Integration {
  id        String            @id @default(cuid())
  name      String
  type      IntegrationType
  status    IntegrationStatus @default(INACTIVE)
  config    Json
  apiKey    String?
  lastSync  DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  fleetId String
  fleet   Fleet @relation(fields: [fleetId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

enum IntegrationType {
  AUTOLOGG
  DATEV
  SAP
  GOOGLE_MAPS
  WEATHER
  TRAFFIC
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
}
